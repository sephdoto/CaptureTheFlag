# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
  - compile
  - test
  - build
  - install

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true

compile-job: # This job runs in the compile stage. First Stage
  stage: compile # First job to check if it compiles
  script:
    - echo "Running compile"
    - ./mvnw $MAVEN_CLI_OPTS compile
      - echo "Compiled successfully"
  needs: []
  artifacts:
    expire_in: 20 minutes

unit-test-job: # This job runs in the test stage. Second Stage
  stage: test # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests..."
    - ./mvnw $MAVEN_CLI_OPTS test
  needs: [compile-job]
  artifacts:
    expire_in: 20 minutes

build-job: # This job runs in the build stage. Third Stage
  stage: build
  script:
    - echo "Compiling the code..."
    - ./mvnw $MAVEN_CLI_OPTS package
    - echo "Compile complete."
  needs: [unit-test-job]
  artifacts:
    expire_in: 20 minutes

install-test-job: # This job runs in the install stage. Fourth Stage
  stage: install # Run the same time as build stage (in parallel).
  script:
    - echo "Testing Maven install."
    - ./mvnw $MAVEN_CLI_OPTS install
    - echo "No Install issues found."
  needs: [unit-test-job]
  artifacts:
    expire_in: 20 minutes
